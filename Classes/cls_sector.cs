// Generated by https://quicktype.io

namespace timebot.Sectors
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System;
    using System.Collections.Generic;
    using System.Globalization;

    public partial class Sector
    {
        [JsonProperty("asteroidBase")]
        public Dictionary<string, AsteroidBase> AsteroidBase { get; set; }

        [JsonProperty("asteroidBelt")]
        public Dictionary<string, AsteroidBase> AsteroidBelt { get; set; }

        [JsonProperty("blackHole")]
        public Dictionary<string, AsteroidBase> BlackHole { get; set; }

        [JsonProperty("deepSpaceStation")]
        public Dictionary<string, AsteroidBase> DeepSpaceStation { get; set; }

        [JsonProperty("gasGiantMine")]
        public Dictionary<string, AsteroidBase> GasGiantMine { get; set; }

        [JsonProperty("layer")]
        public Layer Layer { get; set; }

        [JsonProperty("moon")]
        public Dictionary<string, AsteroidBase> Moon { get; set; }

        [JsonProperty("moonBase")]
        public Dictionary<string, AsteroidBase> MoonBase { get; set; }

        [JsonProperty("navigation")]
        public Layer Navigation { get; set; }

        [JsonProperty("note")]
        public Layer Note { get; set; }

        [JsonProperty("orbitalRuin")]
        public Dictionary<string, AsteroidBase> OrbitalRuin { get; set; }

        [JsonProperty("planet")]
        public Dictionary<string, AsteroidBase> Planet { get; set; }

        [JsonProperty("refuelingStation")]
        public Dictionary<string, AsteroidBase> RefuelingStation { get; set; }

        [JsonProperty("researchBase")]
        public Dictionary<string, AsteroidBase> ResearchBase { get; set; }

        [JsonProperty("sector")]
        public SectorClass SectorSector { get; set; }

        [JsonProperty("spaceStation")]
        public Dictionary<string, AsteroidBase> SpaceStation { get; set; }

        [JsonProperty("system")]
        public Dictionary<string, AsteroidBase> System { get; set; }
    }

    public partial class AsteroidBase
    {
        [JsonProperty("attributes", NullValueHandling = NullValueHandling.Ignore)]
        public Attributes Attributes { get; set; }

        [JsonProperty("created")]
        public Ated Created { get; set; }

        [JsonProperty("creator")]
        public Creator Creator { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("parent")]
        public string Parent { get; set; }

        [JsonProperty("parentEntity")]
        public ParentEntity ParentEntity { get; set; }

        [JsonProperty("updated")]
        public Ated Updated { get; set; }

        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public long? X { get; set; }

        [JsonProperty("y", NullValueHandling = NullValueHandling.Ignore)]
        public long? Y { get; set; }

        [JsonProperty("isHidden", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsHidden { get; set; }
    }

    public partial class Attributes
    {
        [JsonProperty("occupation", NullValueHandling = NullValueHandling.Ignore)]
        public string Occupation { get; set; }

        [JsonProperty("situation", NullValueHandling = NullValueHandling.Ignore)]
        public string Situation { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("tags", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Tags { get; set; }

        [JsonProperty("atmosphere", NullValueHandling = NullValueHandling.Ignore)]
        public string Atmosphere { get; set; }

        [JsonProperty("biosphere", NullValueHandling = NullValueHandling.Ignore)]
        public string Biosphere { get; set; }

        [JsonProperty("population", NullValueHandling = NullValueHandling.Ignore)]
        public string Population { get; set; }

        [JsonProperty("techLevel", NullValueHandling = NullValueHandling.Ignore)]
        public string TechLevel { get; set; }

        [JsonProperty("temperature", NullValueHandling = NullValueHandling.Ignore)]
        public string Temperature { get; set; }
    }

    public partial class Ated
    {
        [JsonProperty("seconds")]
        public long Seconds { get; set; }

        [JsonProperty("nanoseconds")]
        public long Nanoseconds { get; set; }
    }

    public partial class Layer
    {
    }

    public partial class SectorClass
    {
        [JsonProperty("m11ZXBOt6xiJGo21EKio")]
        public M11ZxbOt6XiJGo21EKio M11ZxbOt6XiJGo21EKio { get; set; }
    }

    public partial class M11ZxbOt6XiJGo21EKio
    {
        [JsonProperty("columns")]
        public long Columns { get; set; }

        [JsonProperty("created")]
        public Ated Created { get; set; }

        [JsonProperty("creator")]
        public Creator Creator { get; set; }

        [JsonProperty("mapLocked")]
        public bool MapLocked { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("rows")]
        public long Rows { get; set; }

        [JsonProperty("updated")]
        public Ated Updated { get; set; }
    }

    public enum Creator { The2JidAut5H9Z09GylKgqy2QpnYe53 };

    public enum ParentEntity { AsteroidBelt, BlackHole, Moon, Planet, Sector, System };

    public partial class Sector
    {
        public static Sector FromJson(string json) => JsonConvert.DeserializeObject<Sector>(json, Sectors.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Sector self) => JsonConvert.SerializeObject(self, Sectors.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                CreatorConverter.Singleton,
                ParentEntityConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CreatorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Creator) || t == typeof(Creator?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "2JIDAut5h9Z09gylKGQY2QpnYe53")
            {
                return Creator.The2JidAut5H9Z09GylKgqy2QpnYe53;
            }
            throw new Exception("Cannot unmarshal type Creator");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Creator)untypedValue;
            if (value == Creator.The2JidAut5H9Z09GylKgqy2QpnYe53)
            {
                serializer.Serialize(writer, "2JIDAut5h9Z09gylKGQY2QpnYe53");
                return;
            }
            throw new Exception("Cannot marshal type Creator");
        }

        public static readonly CreatorConverter Singleton = new CreatorConverter();
    }

    internal class ParentEntityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParentEntity) || t == typeof(ParentEntity?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "asteroidBelt":
                    return ParentEntity.AsteroidBelt;

                case "blackHole":
                    return ParentEntity.BlackHole;

                case "moon":
                    return ParentEntity.Moon;

                case "planet":
                    return ParentEntity.Planet;

                case "sector":
                    return ParentEntity.Sector;

                case "system":
                    return ParentEntity.System;
            }
            throw new Exception("Cannot unmarshal type ParentEntity");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ParentEntity)untypedValue;
            switch (value)
            {
                case ParentEntity.AsteroidBelt:
                    serializer.Serialize(writer, "asteroidBelt");
                    return;

                case ParentEntity.BlackHole:
                    serializer.Serialize(writer, "blackHole");
                    return;

                case ParentEntity.Moon:
                    serializer.Serialize(writer, "moon");
                    return;

                case ParentEntity.Planet:
                    serializer.Serialize(writer, "planet");
                    return;

                case ParentEntity.Sector:
                    serializer.Serialize(writer, "sector");
                    return;

                case ParentEntity.System:
                    serializer.Serialize(writer, "system");
                    return;
            }
            throw new Exception("Cannot marshal type ParentEntity");
        }

        public static readonly ParentEntityConverter Singleton = new ParentEntityConverter();
    }
}